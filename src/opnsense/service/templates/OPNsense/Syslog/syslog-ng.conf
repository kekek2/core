@version:3.19

# Do not include plugins
#@include "scl.conf"

options {
    chain_hostnames(off);
    check_hostname(yes);
    keep_hostname(yes);
    flush_lines(0);
    threaded(yes);
};

#
# sources
#
source all { 
    unix-dgram("/var/run/log" flags(no-multi-line));
    unix-dgram("/var/run/logpriv" perm(0600) flags(no-multi-line));
    file("/dev/klog" follow-freq(0) program-override("kernel") multi-line-mode(indented) flags(no-parse no-multi-line));
    internal();
{% for socket in helpers.toList('OPNsense.Syslog.LocalSockets.Socket') %}
    unix-dgram("{{socket.Path}}" flags(no-multi-line));
{% endfor %}
};


#
# program filters
#
{% set allprograms = [] %}
{% for source in helpers.toList('OPNsense.Syslog.LogSources.Source') %}
{%		set program = source.Program|replace('(','\(')|replace(')','\)')|replace(",","|") %}
{% 		do allprograms.append(['program("(', program, ')")']|join) %}
{% endfor %}
filter program_not	{ not (
 {{allprograms|join('\n or ')}}
); };


#
# log targeting
#
{% for target in helpers.toList('OPNsense.Syslog.LogTargets.Target') %}
log {
		source(all); 
{% 	if target.Source %}
		filter { program("({{target.Source|replace('(','\(')|replace(')','\)')|replace(",","|")}})"); };
{% 	else %}
		filter(program_not);
{% 	endif %}
{% 	if target.Filter %}
{%		set filters = target.Filter.split(';') %}
{%		set newfilters = [] %}
{%		set nonefilters = [] %}
{%		for flt in filters %}
{%			set components = flt.split('.') %}
{%			set facility = components[0] %}
{%			set level = components[1] %}
{%			set subfilters = [] %}
{%			if facility != '*' %}
{%				do subfilters.append(['facility(', facility, ')']|join) %}
{%			endif %}
{%			if level != '*' and level != 'none' %}
{%				do subfilters.append(['level(', level, '..emerg)']|join) %}
{%			endif %}
{%			if level == 'none' and facility %}
{%				do nonefilters.append(['not facility(', facility, ')']|join) %}
{%			endif %}
{%			if flt != '*.*' and level != 'none' %}
{%				do newfilters.append(['(', subfilters|join(' and '), ')']|join) %}
{%			endif %}
{%		endfor %}
{%		if newfilters|length > 0 %}
		filter { {{newfilters|join(' or ')}}; } ;
{%		endif %}
{%		for flt in nonefilters %}
		filter { {{flt}}; };
{%		endfor %}
{%	endif %}
{%	if OPNsense.Syslog.DisableLogFiles|default(0) == '0' and target.ActionType == 'file' %}
		destination { file("{{target.Target}}" persist-name("{{target.Source|default('all')}}-{{target.Target}}")); };
{%	endif %}
{%	if target.ActionType == 'pipe' %}
		destination { program("{{target.Target}}"); };
{%	endif %}
{%	if target.ActionType == 'all' %}
		destination { usertty("*"); };
{%	endif %}
{%	if target.ActionType == 'remote' %}
{%		set components = target.Target.split(":") %}
		destination { network("{{components[0]}}" {% if components[1] %}port({{components[1]}}){% endif %} transport("{{OPNsense.Syslog.Remote.Transport}}")); };
{%	endif %}
{% 	if OPNsense.Syslog.Remote.Enable|default(0) == '1' and OPNsense.Syslog.Remote.Servers|length > 0 and OPNsense.Syslog.Remote.LogAll|default(0) == '0' %}
{%		for category in helpers.toList('OPNsense.Syslog.LogCategories.Category') %}
{%			if  category.Name == target.Category  and category.LogRemote == '1' %}
{%				for server in OPNsense.Syslog.Remote.Servers.split(',') %}
{%					set components = server.split(":") %}
		destination { network("{{components[0]}}" {% if components[1] %}port({{components[1]}}){% endif %} transport("{{OPNsense.Syslog.Remote.Transport}}")); };
{%				endfor %}
{%			endif %}
{%		endfor %}
{%	endif %}
};
{% endfor %}

{%	if OPNsense.Syslog.Remote.Enable|default(0) == '1' and OPNsense.Syslog.Remote.Servers|length > 0  and OPNsense.Syslog.Remote.LogAll|default(0) == '1' %}
log {
		source(all);
{%		for server in OPNsense.Syslog.Remote.Servers.split(',') %}
{%			set components = server.split(":") %}
		destination { network("{{components[0]}}" {% if components[1] %}port({{components[1]}}){% endif %} transport("{{OPNsense.Syslog.Remote.Transport}}")); };
{%		endfor %}
};
{% endif %}

@include "syslog-ng.d/*.conf"
